<?php
/**
 * @file
 * Core Lydia features.
 */

/**
 * Implements hook_menu().
 */
function lydia_base_menu() {
  return array(
    // Top level "Lydia" container.
    'admin/lydia' => array(
      'title' => 'Lydia',
      'description' => 'Administration area for Lydia.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
      'weight' => -20,
    ),
    // Catches links marked for redirect and passes them on to be tracked.
    'sites/%/files/r/%/%' => array(
      'title' => 'Google Analytics redirect',
      'description' => 'Strips /r/ and redirects to the url while reporting to GA',
      'page callback' => 'lydia_base_track_n_redirect',
      'access callback' => TRUE,
    ),
  );
}

/**
 * Renders a View for display in some other element.
 *
 * @param $view_key
 *   The ID of the View to embed.
 * @param $display_id
 *   The ID of the display of the View that will actually be rendered.
 * @param $arguments
 *   An array of arguments to pass to the View.
 *
 * @return
 *   The rendered output of the chosen View display.
 */
function lydia_base_embed_view($view_id, $display_id, $arguments = array()) {
  // Load the cart line item View.
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the specific line items for this order.
  $view->set_arguments($arguments);

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();

  // Return the rendered View.
  return $view->render();
}

/**
 * Menuhook callback - tracks the request via Google Analytics and redirects.
 *
 * Destination is determined by stripping out an "r/" from the path.
 */
function lydia_base_track_n_redirect() {
  // Strip /r/ from url - we know that it is there as we're called via
  // a menu hook.
  $url = $_GET['q'];
  $parts = lydia_base_split_file_redirect($url);
  $destination_url = $parts['url'];
  // Warn if we where unable to redirect.
  if ($destination_url == $url) {
    watchdog('lydia_base', 'Could not redirect user to %url', array("%url" => $url), WATCHDOG_ERROR);
    return (t('Could not redirect to file.'));
  }

  // Do the tracking and then redirect.
  lydia_base_ga_track($destination_url, $parts['event_category'], $parts['event_action']);
  drupal_goto($destination_url);
}

/**
 * Track a file-uri (public|private://<path>).
 *
 * If the path contains a redirect element (/r/) it will be stripped before
 * tracking.
 * The actual tracking is handled by lydia_base_ga_track().
 */
function lydia_base_ga_track_file_uri($file_uris = array(), $event_category = NULL, $event_action = NULL) {
  if (!is_array($file_uris)) {
    $file_uris = array($file_uris);
  }

  if (empty($file_uris)) {
    return;
  }

  $stripped_uris = array();
  foreach ($file_uris as $file_uri) {
    // Get the actual url to be tracked, in case the url is already stripped it
    // wont harm to strip twice.
    $parts = lydia_base_split_file_redirect(file_create_url($file_uri));
    if (empty($parts['url'])) {
      continue;
    }

    // Get the relative path.
    $parsed = parse_url($parts['url']);
    if (empty($parsed['path'])) {
      continue;
    }

    $stripped_uris[] = $parsed['path'];
  }

  // We're ready to track.
  lydia_base_ga_track($stripped_uris, $event_category, $event_action);
}

/**
 * Track a url via Google Analytics.
 *
 * Tracking will only be performed if the google analytics module is enabled
 * and an account has been configured.
 */
function lydia_base_ga_track($destination_urls = array(), $event_category = NULL, $event_action = NULL) {
  if (!lydia_base_ga_enabled()) {
    return;
  }
  if (!is_array($destination_urls)) {
    $destination_urls = array($destination_urls);
  }

  // Initialize the tracker.
  require_once libraries_get_path('phpga') . '/src/autoload.php';

  $tracker = new UnitedPrototype\GoogleAnalytics\Tracker(variable_get('googleanalytics_account'), $_SERVER['HTTP_HOST']);

  // Assemble Visitor information.
  $visitor = new UnitedPrototype\GoogleAnalytics\Visitor();
  $visitor->setIpAddress(ip_address());
  $visitor->setUserAgent($_SERVER['HTTP_USER_AGENT']);

  // Assemble Session information.
  $session = new UnitedPrototype\GoogleAnalytics\Session();

  // Track multiple requests in the same session.
  foreach ($destination_urls as $destination_url) {
    $pathinfo = pathinfo($destination_url);
    $filename = $pathinfo['basename'];

    // Assemble Page information.
    $page = new UnitedPrototype\GoogleAnalytics\Page('/' . $destination_url);
    if (!empty($filename)) {
      $page->setTitle($filename);
    }

    // Track page view.
    $tracker->trackPageview($page, $session, $visitor);
    // Track event if we have a catagory.

    if ($event_category !== NULL) {
      // Allow null-action, Google requires it so fill in a default value.
      $event_action = ($event_action === NULL) ? 'default' : $event_action;

      // Track number of destinations as value - also don't specify label.
      $event = new UnitedPrototype\GoogleAnalytics\Event($event_category, $event_action, $event_category . '/' . $filename, 1, TRUE);
      $tracker->trackEvent($event, $session, $visitor);
    }
  }
}

/**
 * Injects a redirect marker into the specified filepath.
 *
 * Upon accessing the file the request will be tracked and the user redirected
 * to the original path.
 *
 * Action name and channel-id is used to produce Google Analytic events.
 * See lydia_base_split_file_redirect() for how the information is used.
 */
function lydia_base_inject_file_redirect($file_path, $action_name = 'default', $channel_id = NULL) {
  if (!empty($file_path) && preg_match('#(^.*?)(lydia-channel.*)$#', $file_path, $matches)) {
    $chan = ($channel_id !== NULL && $channel_id) ? $channel_id . '/' : '';
    return $matches[1] . 'r/' . $action_name . '/' . $chan . $matches[2];
  }
  else {
    return $file_path;
  }
}

/**
 * Strips the redirect marker from a file_path and returns its parts.
 *
 * If a channel-id is found the channels google-analytics event category-value
 * is looked up and returned as well.
 */
function lydia_base_split_file_redirect($file_path) {
  if (!empty($file_path) && preg_match('#(?P<prefix>^.*?)r/(:?(?P<event_action>.*?)/)?(:?(?P<channel_id>\d*?)/)?(?P<postfix>lydia-channel.*)$#', $file_path, $parts)) {
    $parts['url'] = $parts['prefix'] . $parts['postfix'];
  }
  else {
    // No match, just pass the url through.
    $parts['url'] = $file_path;
  }

  // Load the node and get associated ga category.
  $parts['event_category'] = lydia_base_get_ga_category($parts['channel_id']);
  if ($parts['event_category'] === NULL) {
    // Default value that can be passed into lydia_base_ga_track.
    $parts['channel_id'] = NULL;
  }
  return $parts;
}

/**
 * Implements hook_file_url_alter().
 *
 * Detect where the link is being rendered and inject the correct referer
 * action.
 */
function lydia_base_file_url_alter(&$url) {

  if (lydia_base_ga_enabled()) {
    // See if the URL looks like something we need to care about.
    $extensions = explode(' ', variable_get('lydia_redirect_extensions', 'mp3'));
    $match = FALSE;
    foreach ($extensions as $ex) {
      if (strpos($url, $ex) !== FALSE) {
        $match = TRUE;
      }
    }

    // Stop if we could not find the file-extension.
    if (!$match) {
      return;
    }

    // Otherwise, figure out what kind of url we have and inject accordingly.
    if ((arg(0) == 'lydia-channel' || arg(0) == 'node') && is_numeric(arg(1)) && arg(2) == 'audio-feed') {
      // Rss view.
      $url = lydia_base_inject_file_redirect($url, 'rss', arg(1));
    }
    elseif (arg(0) == 'lydia-channel' && is_numeric(arg(1)) && arg(2) == 'playlist') {
      // Playlist view.
      $url = lydia_base_inject_file_redirect($url, 'playlist', arg(1));
    }
    elseif (arg(0) == 'node' && is_numeric(arg(1))) {
      // Node view.
      $url = lydia_base_inject_file_redirect($url, 'stream', arg(1));
    }
    else {
      $url = lydia_base_inject_file_redirect($url);
    }
  }
}

/**
 * Checks if Google Analytics is configured and enabled.
 */
function lydia_base_ga_enabled() {
  return (module_exists('googleanalytics') && variable_get('googleanalytics_account', FALSE) !== FALSE);
}

/**
 * Extract the Google Analytics category-name from a node.
 *
 * If the field field_ga_eventcategory empty title will be used instead. If both
 * are empty a default "missing category" will be returned.
 */
function lydia_base_get_ga_category($nid) {
  $category = 'missing category';
  if (is_numeric($nid)) {
    // Attempt to load the node.
    $node = node_load($nid);
    if (is_object($node)) {

      $items = field_get_items('node', $node, 'field_ga_eventcategory');
      if (!empty($items[0]['value'])) {
        $category = $items[0]['value'];
      }
      elseif (!empty($node->title)) {
        $category = $node->title;
      }
    }
  }
  return $category;
}

/**
 * Enable the system_status module.
 */
function lydia_base_update_7001() {
  module_enable(array('system_status'));
}
